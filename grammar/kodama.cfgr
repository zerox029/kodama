module kodama;

import dataType;
import terminal;

program : { statement | function };

function : 'def' identifier '(' parameters ')' '->' data_type function_body;
function_parameters : { identifier ':' data_type ',' } identifier ':' data_type;
function_body : '{' statement '}' | '=>' equality;

statement : expression (';' | '\n')
          | '{' statement '}'
          | 'if' '(' equality ')' statement ['else' statement]
          | 'while' '(' equality ')' statement
          | 'do' statement 'while' '(' condition ')'
          | 'for' identifier 'in' add_expression ('to' | 'until') add_expression statement
          | 'return' expression (';' | '\n')
          | struct;

struct : 'struct' identifier '{' [ identifier ':' data_type (';' | '\n') ] '}';

expression : assignment | reassignment | equality;

assignment : ('let' | 'val') identifier ':' data_type '=' equality;
reassignment : identifier reassignment_operator equality;

equality : add_expression '==' equality
         | add_expression '!=' equality
         | add_expression '>' equality
         | add_expression '<' equality
         | add_expression '>=' equality
         | add_expression '<=' equality
         | add_expression;

add_expression : mul_expression '+' add_expression
               | mul_expression '-' add_expression
               | mul_expression;

mul_expression : unary '*' mul_expression
               | unary '/' mul_expression
               | unary '%' mul_expression
               | unary;

unary : ['-' | '+'] primary;

primary : call | number | identifier;
call : identifier '(' function_arguments ')';
function_arguments : { [identifier ':'] equality ',' } [identifier ':'] equality;

reassignment_operator : '=' | '+=' | '-=' | '*=' | '/=' | '%=';